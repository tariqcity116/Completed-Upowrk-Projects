using System;

class TheatreBoxOffice
{
    // Theatre layout
    const int NUM_ROWS = 10;
    const int NUM_COLS = 20;
    static bool[,] seats = new bool[NUM_ROWS, NUM_COLS];

    // Allocate seats for customer
    static string AllocateSeats(int numSeats)
    {
        int row = -1, col = -1;
        for (int r = 0; r < NUM_ROWS; r++)
        {
            for (int c = 0; c < NUM_COLS; c++)
            {
                bool isSeatAvailable = !seats[r, c];
                if (isSeatAvailable)
                {
                    if (row == -1)
                    {
                        // Start a new block of seats
                        row = r;
                        col = c;
                    }
                    else if (c - col + 1 >= numSeats)
                    {
                        // Found enough seats in current block
                        for (int i = col; i < col + numSeats; i++)
                        {
                            seats[row, i] = true;
                        }
                        return $"Seats allocated: {GetSeatLabel(row, col)} - {GetSeatLabel(row, col + numSeats - 1)}";
                    }
                }
                else
                {
                    // End of current block of seats
                    row = -1;
                    col = -1;
                }
            }
        }

        // Not enough seats available
        return "Not enough seats available.";
    }

    // Convert row and column numbers to seat label
    static string GetSeatLabel(int row, int col)
    {
        char rowLabel = (char)('A' + row);
        int colLabel = col + 1;
        return $"{rowLabel}{colLabel:D2}";
    }

    // Main function to test the program
    static void Main()
    {
        // Initialize seats
        for (int r = 0; r < NUM_ROWS; r++)
        {
            for (int c = 0; c < NUM_COLS; c++)
            {
                seats[r, c] = false;
            }
        }

        // Test case 1: Not enough seats available
        Console.WriteLine(AllocateSeats(50));

        // Test case 2: Not enough seats available
        seats[0, 0] = true;
        seats[0, 1] = true;
        seats[0, 2] = true;
        Console.WriteLine(AllocateSeats(4));

        // Test case 3: Allocate seats from A1
        Console.WriteLine(AllocateSeats(3));

        // Test case 4: Allocate seats from B4
        seats[1, 3] = true;
        seats[1, 4] = true;
        seats[1, 5] = true;
        seats[1, 6] = true;
        seats[1, 7] = true;
        Console.WriteLine(AllocateSeats(4));
    }
}



This program uses a 2D boolean array seats to represent the theatre layout, where seats[r, c] is true if the seat at row r and column c is already allocated. The AllocateSeats function takes an integer argument numSeats and returns a string indicating which seats have been allocated. If there are not enough seats available to meet the request, the function returns a status indicating that there are not enough seats available. If some seats are available but less than the number requested, the function returns the same status. If there are enough seats to meet the request, the function allocates the required number of seats starting